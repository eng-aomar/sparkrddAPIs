[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\fr-pa\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\fr-pa\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Oracle Corporation Java 1.8.0_291)
[debug]       Load.loadUnit: plugins took 87.3523ms
[debug]       Load.loadUnit: defsScala took 0.2598ms
[debug] [Loading] Scanning directory C:\Users\fr-pa\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\fr-pa\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 14.6778 ms
[debug]           Load.resolveProject(global-plugins) took 39.4559ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\fr-pa\.sbt\1.0\plugins, plugins: List(<none>))) took 77.6371ms
[debug] [Loading] Done in C:\Users\fr-pa\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 97.7342ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1968ms
[debug]     Load.loadUnit(file:/C:/Users/fr-pa/.sbt/1.0/plugins/, ...) took 191.8129ms
[debug]   Load.apply: load took 3253.2651ms
[debug]   Load.apply: resolveProjects took 4.8913ms
[debug]   Load.apply: finalTransforms took 56.6281ms
[debug]   Load.apply: config.delegates took 9.5998ms
[debug]   Load.apply: Def.make(settings)... took 394.3897ms
[debug]   Load.apply: structureIndex took 94.517ms
[debug]   Load.apply: mkStreams took 1.4338ms
[info] loading global plugins from C:\Users\fr-pa\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 5676.9061ms
[debug]           Load.loadUnit: plugins took 33.0367ms
[debug]           Load.loadUnit: defsScala took 0.0035ms
[debug] [Loading] Scanning directory C:\Users\fr-pa\IdeaProjects\sparkrdd\project
[debug]             Load.loadUnit: mkEval took 9.9521ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\fr-pa\IdeaProjects\sparkrdd\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.7337 ms
[info] loading settings for project sparkrdd-build from idea.sbt ...
[debug]               Load.resolveProject(sparkrdd-build) took 3.4724ms
[debug]             Load.loadTransitive: finalizeProject(Project(id sparkrdd-build, base: C:\Users\fr-pa\IdeaProjects\sparkrdd\project, plugins: List(<none>))) took 6.7111ms
[debug] [Loading] Done in C:\Users\fr-pa\IdeaProjects\sparkrdd\project, returning: (sparkrdd-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 206.0146ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.1892ms
[debug]         Load.loadUnit(file:/C:/Users/fr-pa/IdeaProjects/sparkrdd/project/, ...) took 244.6149ms
[debug]       Load.apply: load took 246.5815ms
[debug]       Load.apply: resolveProjects took 0.0813ms
[debug]       Load.apply: finalTransforms took 9.4847ms
[debug]       Load.apply: config.delegates took 0.662ms
[debug]       Load.apply: Def.make(settings)... took 95.9914ms
[debug]       Load.apply: structureIndex took 37.3311ms
[debug]       Load.apply: mkStreams took 0.0036ms
[info] loading project definition from C:\Users\fr-pa\IdeaProjects\sparkrdd\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 1858.1445ms
[debug]     Load.loadUnit: defsScala took 0.0027ms
[debug] [Loading] Scanning directory C:\Users\fr-pa\IdeaProjects\sparkrdd
[debug]       Load.loadUnit: mkEval took 0.3239ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\fr-pa\IdeaProjects\sparkrdd, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.243 ms
[info] loading settings for project sparkrdd from build.sbt ...
[debug]         Load.resolveProject(sparkrdd) took 37.2164ms
[debug]       Load.loadTransitive: finalizeProject(Project(id sparkrdd, base: C:\Users\fr-pa\IdeaProjects\sparkrdd, plugins: List(<none>))) took 40.6083ms
[debug] [Loading] Done in C:\Users\fr-pa\IdeaProjects\sparkrdd, returning: (sparkrdd)
[debug]     Load.loadUnit: loadedProjectsRaw took 2455.1368ms
[debug]     Load.loadUnit: cleanEvalClasses took 13.2149ms
[debug]   Load.loadUnit(file:/C:/Users/fr-pa/IdeaProjects/sparkrdd/, ...) took 4327.3477ms
[debug] Load.apply: load took 4330.7245ms
[debug] Load.apply: resolveProjects took 0.1782ms
[debug] Load.apply: finalTransforms took 26.1824ms
[debug] Load.apply: config.delegates took 0.3406ms
[debug] Load.apply: Def.make(settings)... took 93.6055ms
[debug] Load.apply: structureIndex took 24.7982ms
[debug] Load.apply: mkStreams took 0.0025ms
[info] set current project to sparkrdd (in build file:/C:/Users/fr-pa/IdeaProjects/sparkrdd/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 61667 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 61667, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to sparkrdd (in build file:/C:/Users/fr-pa/IdeaProjects/sparkrdd/)
[debug] > Exec(idea-shell, None, None)
